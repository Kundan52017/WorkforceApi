{"file_contents":{"replit.md":{"content":"# Workforce Management API\n\n## Overview\n\nThis is a Spring Boot-based Workforce Management API designed for a logistics super-app. The system manages tasks, staff assignments, and workflows for employee productivity tracking. The application handles core concepts including Tasks (units of work), Staff (employees), Status tracking (ACTIVE, COMPLETED, CANCELLED), and Priority management. The system is built to help managers create, assign, and track tasks for their employees efficiently.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Backend Framework\n- **Spring Boot with Gradle**: Chosen for rapid development, extensive ecosystem, and enterprise-grade features\n- **RESTful API Design**: Standard HTTP endpoints for task and staff management operations\n- **Layered Architecture**: Clear separation between controllers, services, models, and DTOs for maintainability\n\n### Project Structure\n```\nsrc/main/java/com/company/workforcemgmt/\n├── WorkforcemgmtApplication.java\n├── controller/ (API endpoints)\n├── service/ (Business logic)\n├── model/ (Domain entities)\n└── dto/ (Data transfer objects)\n```\n\n### Core Components\n- **TaskController**: Handles HTTP requests for task operations including creation, assignment, and status updates\n- **TaskService**: Contains business logic for task management, assignment workflows, and validation\n- **Task Model**: Core entity representing work units with properties like title, status, dates, and priority\n- **Staff Model**: Represents employees who can be assigned to tasks\n\n### Data Management\n- **In-Memory Storage**: Currently using collections for data persistence (suitable for development/demo)\n- **DTO Pattern**: Separation between internal models and API responses for better data control\n- **Task Assignment Logic**: Supports task reassignment with duplicate prevention mechanisms\n\n### Key Features\n- **Task CRUD Operations**: Create, read, update, and delete tasks\n- **Staff Assignment**: Assign and reassign tasks to employees\n- **Status Tracking**: Monitor task progress through ACTIVE, COMPLETED, CANCELLED states\n- **Priority System**: Categorize tasks by importance levels\n- **Assignment by Reference**: Reassign tasks using reference IDs to prevent duplication\n\n## External Dependencies\n\n### Core Spring Dependencies\n- **Spring Web**: Provides REST API capabilities and HTTP request handling\n- **Spring Boot Starter**: Foundation framework for auto-configuration and embedded server\n\n### Development Tools\n- **Lombok**: Reduces boilerplate code by auto-generating getters, setters, constructors, and builder patterns\n- **MapStruct**: Handles object mapping between models and DTOs with compile-time code generation\n\n### Build System\n- **Gradle**: Build automation and dependency management system chosen for its flexibility and performance\n\n### Potential Future Dependencies\n- **Database Integration**: Ready for JPA/Hibernate integration when persistent storage is needed\n- **Validation Framework**: Spring Boot Validation for request validation\n- **Testing Framework**: JUnit and Spring Test for comprehensive testing coverage","size_bytes":3179},"src/main/java/com/workforcemgmt/WorkforcemgmtApplication.java":{"content":"package com.workforcemgmt;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n/**\n * Main application class for Workforce Management API\n */\n@SpringBootApplication\npublic class WorkforcemgmtApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(WorkforcemgmtApplication.class, args);\n    }\n}\n","size_bytes":397},"src/main/java/com/workforcemgmt/controller/StaffController.java":{"content":"package com.workforcemgmt.controller;\n\nimport com.workforcemgmt.dto.StaffDto;\nimport com.workforcemgmt.model.Staff;\nimport com.workforcemgmt.service.StaffService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport jakarta.validation.Valid;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * REST Controller for managing staff members\n */\n@RestController\n@RequestMapping(\"/api/staff\")\npublic class StaffController {\n\n    private final StaffService staffService;\n\n    @Autowired\n    public StaffController(StaffService staffService) {\n        this.staffService = staffService;\n    }\n\n    @GetMapping\n    public ResponseEntity<List<StaffDto>> getAllStaff() {\n        List<Staff> staff = staffService.getAllStaff();\n        List<StaffDto> staffDtos = staff.stream()\n            .map(this::convertToDto)\n            .collect(Collectors.toList());\n        return ResponseEntity.ok(staffDtos);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<StaffDto> getStaffById(@PathVariable String id) {\n        Staff staff = staffService.getStaffById(id);\n        return ResponseEntity.ok(convertToDto(staff));\n    }\n\n    @PostMapping\n    public ResponseEntity<StaffDto> createStaff(@Valid @RequestBody StaffDto staffDto) {\n        Staff staff = convertToEntity(staffDto);\n        Staff createdStaff = staffService.createStaff(staff);\n        return ResponseEntity.status(HttpStatus.CREATED).body(convertToDto(createdStaff));\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<StaffDto> updateStaff(@PathVariable String id, @Valid @RequestBody StaffDto staffDto) {\n        Staff staff = convertToEntity(staffDto);\n        Staff updatedStaff = staffService.updateStaff(id, staff);\n        return ResponseEntity.ok(convertToDto(updatedStaff));\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteStaff(@PathVariable String id) {\n        staffService.deleteStaff(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    private StaffDto convertToDto(Staff staff) {\n        return new StaffDto(staff.getId(), staff.getName(), staff.getEmail(), staff.getDepartment());\n    }\n\n    private Staff convertToEntity(StaffDto staffDto) {\n        return new Staff(staffDto.getId(), staffDto.getName(), staffDto.getEmail(), staffDto.getDepartment());\n    }\n}\n","size_bytes":2453},"src/main/java/com/workforcemgmt/controller/TaskController.java":{"content":"package com.workforcemgmt.controller;\n\nimport com.workforcemgmt.dto.*;\nimport com.workforcemgmt.mapper.TaskMapper;\nimport com.workforcemgmt.model.Priority;\nimport com.workforcemgmt.model.Task;\nimport com.workforcemgmt.model.TaskStatus;\nimport com.workforcemgmt.service.TaskService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport jakarta.validation.Valid;\nimport java.time.LocalDate;\nimport java.util.List;\n\n/**\n * REST Controller for managing tasks\n */\n@RestController\n@RequestMapping(\"/api/tasks\")\npublic class TaskController {\n\n    private final TaskService taskService;\n    private final TaskMapper taskMapper;\n\n    @Autowired\n    public TaskController(TaskService taskService, TaskMapper taskMapper) {\n        this.taskService = taskService;\n        this.taskMapper = taskMapper;\n    }\n\n    @PostMapping\n    public ResponseEntity<TaskDto> createTask(@Valid @RequestBody CreateTaskRequest request) {\n        Task createdTask = taskService.createTask(request);\n        TaskDto taskDto = taskMapper.taskToTaskDto(createdTask);\n        return ResponseEntity.status(HttpStatus.CREATED).body(taskDto);\n    }\n\n    @GetMapping\n    public ResponseEntity<List<TaskDto>> getAllTasks() {\n        List<Task> tasks = taskService.getAllTasks();\n        List<TaskDto> taskDtos = taskMapper.tasksToTaskDtos(tasks);\n        return ResponseEntity.ok(taskDtos);\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<TaskDetailsDto> getTaskById(@PathVariable String id) {\n        Task task = taskService.getTaskWithFullDetails(id);\n        TaskDetailsDto taskDetailsDto = taskMapper.taskToTaskDetailsDto(task);\n        return ResponseEntity.ok(taskDetailsDto);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<TaskDto> updateTask(@PathVariable String id, @Valid @RequestBody Task task) {\n        Task updatedTask = taskService.updateTask(id, task);\n        TaskDto taskDto = taskMapper.taskToTaskDto(updatedTask);\n        return ResponseEntity.ok(taskDto);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteTask(@PathVariable String id) {\n        taskService.deleteTask(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    /**\n     * Reassign task by customer reference - fixes Bug 1\n     */\n    @PostMapping(\"/assign-by-ref\")\n    public ResponseEntity<TaskDto> reassignTaskByCustomerReference(\n            @RequestParam String customerReference,\n            @RequestParam String newStaffId,\n            @RequestParam String updatedBy) {\n        Task reassignedTask = taskService.reassignTaskByCustomerReference(customerReference, newStaffId, updatedBy);\n        TaskDto taskDto = taskMapper.taskToTaskDto(reassignedTask);\n        return ResponseEntity.ok(taskDto);\n    }\n\n    /**\n     * Get tasks by date range - fixes Bug 2 (excludes cancelled tasks)\n     */\n    @GetMapping(\"/date-range\")\n    public ResponseEntity<List<TaskDto>> getTasksByDateRange(\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {\n        List<Task> tasks = taskService.getTasksByDateRange(startDate, endDate);\n        List<TaskDto> taskDtos = taskMapper.tasksToTaskDtos(tasks);\n        return ResponseEntity.ok(taskDtos);\n    }\n\n    /**\n     * Smart daily task view - Feature 1\n     */\n    @GetMapping(\"/smart-daily\")\n    public ResponseEntity<List<TaskDto>> getSmartDailyTasks(\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,\n            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {\n        List<Task> tasks = taskService.getSmartDailyTasks(startDate, endDate);\n        List<TaskDto> taskDtos = taskMapper.tasksToTaskDtos(tasks);\n        return ResponseEntity.ok(taskDtos);\n    }\n\n    /**\n     * Update task priority - Feature 2\n     */\n    @PutMapping(\"/{id}/priority\")\n    public ResponseEntity<TaskDto> updateTaskPriority(\n            @PathVariable String id,\n            @Valid @RequestBody UpdatePriorityRequest request) {\n        Task updatedTask = taskService.updateTaskPriority(id, request.getPriority(), request.getUpdatedBy());\n        TaskDto taskDto = taskMapper.taskToTaskDto(updatedTask);\n        return ResponseEntity.ok(taskDto);\n    }\n\n    /**\n     * Get tasks by priority - Feature 2\n     */\n    @GetMapping(\"/priority/{priority}\")\n    public ResponseEntity<List<TaskDto>> getTasksByPriority(@PathVariable Priority priority) {\n        List<Task> tasks = taskService.getTasksByPriority(priority);\n        List<TaskDto> taskDtos = taskMapper.tasksToTaskDtos(tasks);\n        return ResponseEntity.ok(taskDtos);\n    }\n\n    /**\n     * Add comment to task - Feature 3\n     */\n    @PostMapping(\"/{id}/comments\")\n    public ResponseEntity<TaskDetailsDto> addCommentToTask(\n            @PathVariable String id,\n            @Valid @RequestBody AddCommentRequest request) {\n        Task updatedTask = taskService.addCommentToTask(id, request.getUserId(), request.getUserName(), request.getContent());\n        TaskDetailsDto taskDetailsDto = taskMapper.taskToTaskDetailsDto(updatedTask);\n        return ResponseEntity.ok(taskDetailsDto);\n    }\n\n    /**\n     * Update task status\n     */\n    @PutMapping(\"/{id}/status\")\n    public ResponseEntity<TaskDto> updateTaskStatus(\n            @PathVariable String id,\n            @RequestParam TaskStatus status,\n            @RequestParam String updatedBy) {\n        Task updatedTask = taskService.updateTaskStatus(id, status, updatedBy);\n        TaskDto taskDto = taskMapper.taskToTaskDto(updatedTask);\n        return ResponseEntity.ok(taskDto);\n    }\n}\n","size_bytes":5858},"src/main/java/com/workforcemgmt/dto/AddCommentRequest.java":{"content":"package com.workforcemgmt.dto;\n\nimport jakarta.validation.constraints.NotBlank;\n\n/**\n * DTO for adding comments to tasks\n */\npublic class AddCommentRequest {\n    @NotBlank(message = \"Comment content is required\")\n    private String content;\n    \n    @NotBlank(message = \"User ID is required\")\n    private String userId;\n    \n    @NotBlank(message = \"User name is required\")\n    private String userName;\n\n    public AddCommentRequest() {}\n\n    public AddCommentRequest(String content, String userId, String userName) {\n        this.content = content;\n        this.userId = userId;\n        this.userName = userName;\n    }\n\n    // Getters and Setters\n    public String getContent() { return content; }\n    public void setContent(String content) { this.content = content; }\n\n    public String getUserId() { return userId; }\n    public void setUserId(String userId) { this.userId = userId; }\n\n    public String getUserName() { return userName; }\n    public void setUserName(String userName) { this.userName = userName; }\n}\n","size_bytes":1018},"src/main/java/com/workforcemgmt/dto/CreateTaskRequest.java":{"content":"package com.workforcemgmt.dto;\n\nimport com.workforcemgmt.model.Priority;\nimport jakarta.validation.constraints.NotBlank;\nimport jakarta.validation.constraints.NotNull;\nimport java.time.LocalDate;\n\n/**\n * DTO for creating new tasks\n */\npublic class CreateTaskRequest {\n    @NotBlank(message = \"Title is required\")\n    private String title;\n    \n    private String description;\n    \n    @NotNull(message = \"Priority is required\")\n    private Priority priority;\n    \n    @NotNull(message = \"Assigned staff ID is required\")\n    private String assignedStaffId;\n    \n    @NotNull(message = \"Start date is required\")\n    private LocalDate startDate;\n    \n    @NotNull(message = \"Due date is required\")\n    private LocalDate dueDate;\n    \n    @NotBlank(message = \"Created by is required\")\n    private String createdBy;\n    \n    private String customerReference;\n\n    public CreateTaskRequest() {}\n\n    public CreateTaskRequest(String title, String description, Priority priority, String assignedStaffId, \n                           LocalDate startDate, LocalDate dueDate, String createdBy, String customerReference) {\n        this.title = title;\n        this.description = description;\n        this.priority = priority;\n        this.assignedStaffId = assignedStaffId;\n        this.startDate = startDate;\n        this.dueDate = dueDate;\n        this.createdBy = createdBy;\n        this.customerReference = customerReference;\n    }\n\n    // Getters and Setters\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n\n    public Priority getPriority() { return priority; }\n    public void setPriority(Priority priority) { this.priority = priority; }\n\n    public String getAssignedStaffId() { return assignedStaffId; }\n    public void setAssignedStaffId(String assignedStaffId) { this.assignedStaffId = assignedStaffId; }\n\n    public LocalDate getStartDate() { return startDate; }\n    public void setStartDate(LocalDate startDate) { this.startDate = startDate; }\n\n    public LocalDate getDueDate() { return dueDate; }\n    public void setDueDate(LocalDate dueDate) { this.dueDate = dueDate; }\n\n    public String getCreatedBy() { return createdBy; }\n    public void setCreatedBy(String createdBy) { this.createdBy = createdBy; }\n\n    public String getCustomerReference() { return customerReference; }\n    public void setCustomerReference(String customerReference) { this.customerReference = customerReference; }\n}\n","size_bytes":2601},"src/main/java/com/workforcemgmt/dto/StaffDto.java":{"content":"package com.workforcemgmt.dto;\n\n/**\n * DTO for Staff information\n */\npublic class StaffDto {\n    private String id;\n    private String name;\n    private String email;\n    private String department;\n\n    public StaffDto() {}\n\n    public StaffDto(String id, String name, String email, String department) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.department = department;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n\n    public String getDepartment() { return department; }\n    public void setDepartment(String department) { this.department = department; }\n}\n","size_bytes":903},"src/main/java/com/workforcemgmt/dto/TaskDetailsDto.java":{"content":"package com.workforcemgmt.dto;\n\nimport com.workforcemgmt.model.ActivityEntry;\nimport com.workforcemgmt.model.Comment;\nimport com.workforcemgmt.model.Priority;\nimport com.workforcemgmt.model.TaskStatus;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n/**\n * DTO for detailed task information including activity history and comments\n */\npublic class TaskDetailsDto {\n    private String id;\n    private String title;\n    private String description;\n    private TaskStatus status;\n    private Priority priority;\n    private String assignedStaffId;\n    private String assignedStaffName;\n    private LocalDate startDate;\n    private LocalDate dueDate;\n    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n    private String createdBy;\n    private String customerReference;\n    private List<ActivityEntry> activityHistory;\n    private List<Comment> comments;\n\n    public TaskDetailsDto() {}\n\n    public TaskDetailsDto(String id, String title, String description, TaskStatus status, Priority priority,\n                         String assignedStaffId, String assignedStaffName, LocalDate startDate, LocalDate dueDate,\n                         LocalDateTime createdAt, LocalDateTime updatedAt, String createdBy, String customerReference,\n                         List<ActivityEntry> activityHistory, List<Comment> comments) {\n        this.id = id;\n        this.title = title;\n        this.description = description;\n        this.status = status;\n        this.priority = priority;\n        this.assignedStaffId = assignedStaffId;\n        this.assignedStaffName = assignedStaffName;\n        this.startDate = startDate;\n        this.dueDate = dueDate;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.createdBy = createdBy;\n        this.customerReference = customerReference;\n        this.activityHistory = activityHistory;\n        this.comments = comments;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n\n    public TaskStatus getStatus() { return status; }\n    public void setStatus(TaskStatus status) { this.status = status; }\n\n    public Priority getPriority() { return priority; }\n    public void setPriority(Priority priority) { this.priority = priority; }\n\n    public String getAssignedStaffId() { return assignedStaffId; }\n    public void setAssignedStaffId(String assignedStaffId) { this.assignedStaffId = assignedStaffId; }\n\n    public String getAssignedStaffName() { return assignedStaffName; }\n    public void setAssignedStaffName(String assignedStaffName) { this.assignedStaffName = assignedStaffName; }\n\n    public LocalDate getStartDate() { return startDate; }\n    public void setStartDate(LocalDate startDate) { this.startDate = startDate; }\n\n    public LocalDate getDueDate() { return dueDate; }\n    public void setDueDate(LocalDate dueDate) { this.dueDate = dueDate; }\n\n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n\n    public LocalDateTime getUpdatedAt() { return updatedAt; }\n    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }\n\n    public String getCreatedBy() { return createdBy; }\n    public void setCreatedBy(String createdBy) { this.createdBy = createdBy; }\n\n    public String getCustomerReference() { return customerReference; }\n    public void setCustomerReference(String customerReference) { this.customerReference = customerReference; }\n\n    public List<ActivityEntry> getActivityHistory() { return activityHistory; }\n    public void setActivityHistory(List<ActivityEntry> activityHistory) { this.activityHistory = activityHistory; }\n\n    public List<Comment> getComments() { return comments; }\n    public void setComments(List<Comment> comments) { this.comments = comments; }\n}\n","size_bytes":4161},"src/main/java/com/workforcemgmt/dto/TaskDto.java":{"content":"package com.workforcemgmt.dto;\n\nimport com.workforcemgmt.model.Priority;\nimport com.workforcemgmt.model.TaskStatus;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\n\n/**\n * DTO for Task information used in API responses\n */\npublic class TaskDto {\n    private String id;\n    private String title;\n    private String description;\n    private TaskStatus status;\n    private Priority priority;\n    private String assignedStaffId;\n    private String assignedStaffName;\n    private LocalDate startDate;\n    private LocalDate dueDate;\n    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n    private String createdBy;\n    private String customerReference;\n\n    public TaskDto() {}\n\n    public TaskDto(String id, String title, String description, TaskStatus status, Priority priority,\n                   String assignedStaffId, String assignedStaffName, LocalDate startDate, LocalDate dueDate,\n                   LocalDateTime createdAt, LocalDateTime updatedAt, String createdBy, String customerReference) {\n        this.id = id;\n        this.title = title;\n        this.description = description;\n        this.status = status;\n        this.priority = priority;\n        this.assignedStaffId = assignedStaffId;\n        this.assignedStaffName = assignedStaffName;\n        this.startDate = startDate;\n        this.dueDate = dueDate;\n        this.createdAt = createdAt;\n        this.updatedAt = updatedAt;\n        this.createdBy = createdBy;\n        this.customerReference = customerReference;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n\n    public TaskStatus getStatus() { return status; }\n    public void setStatus(TaskStatus status) { this.status = status; }\n\n    public Priority getPriority() { return priority; }\n    public void setPriority(Priority priority) { this.priority = priority; }\n\n    public String getAssignedStaffId() { return assignedStaffId; }\n    public void setAssignedStaffId(String assignedStaffId) { this.assignedStaffId = assignedStaffId; }\n\n    public String getAssignedStaffName() { return assignedStaffName; }\n    public void setAssignedStaffName(String assignedStaffName) { this.assignedStaffName = assignedStaffName; }\n\n    public LocalDate getStartDate() { return startDate; }\n    public void setStartDate(LocalDate startDate) { this.startDate = startDate; }\n\n    public LocalDate getDueDate() { return dueDate; }\n    public void setDueDate(LocalDate dueDate) { this.dueDate = dueDate; }\n\n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n\n    public LocalDateTime getUpdatedAt() { return updatedAt; }\n    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }\n\n    public String getCreatedBy() { return createdBy; }\n    public void setCreatedBy(String createdBy) { this.createdBy = createdBy; }\n\n    public String getCustomerReference() { return customerReference; }\n    public void setCustomerReference(String customerReference) { this.customerReference = customerReference; }\n}\n","size_bytes":3399},"src/main/java/com/workforcemgmt/dto/UpdatePriorityRequest.java":{"content":"package com.workforcemgmt.dto;\n\nimport com.workforcemgmt.model.Priority;\nimport jakarta.validation.constraints.NotNull;\n\n/**\n * DTO for updating task priority\n */\npublic class UpdatePriorityRequest {\n    @NotNull(message = \"Priority is required\")\n    private Priority priority;\n    \n    @NotNull(message = \"Updated by is required\")\n    private String updatedBy;\n\n    public UpdatePriorityRequest() {}\n\n    public UpdatePriorityRequest(Priority priority, String updatedBy) {\n        this.priority = priority;\n        this.updatedBy = updatedBy;\n    }\n\n    // Getters and Setters\n    public Priority getPriority() { return priority; }\n    public void setPriority(Priority priority) { this.priority = priority; }\n\n    public String getUpdatedBy() { return updatedBy; }\n    public void setUpdatedBy(String updatedBy) { this.updatedBy = updatedBy; }\n}\n","size_bytes":847},"src/main/java/com/workforcemgmt/exception/GlobalExceptionHandler.java":{"content":"package com.workforcemgmt.exception;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.FieldError;\nimport org.springframework.web.bind.MethodArgumentNotValidException;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\n\nimport java.time.LocalDateTime;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * Global exception handler for the application\n */\n@RestControllerAdvice\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(ResourceNotFoundException.class)\n    public ResponseEntity<Map<String, Object>> handleResourceNotFound(ResourceNotFoundException ex) {\n        Map<String, Object> errorResponse = new HashMap<>();\n        errorResponse.put(\"timestamp\", LocalDateTime.now());\n        errorResponse.put(\"status\", HttpStatus.NOT_FOUND.value());\n        errorResponse.put(\"error\", \"Resource Not Found\");\n        errorResponse.put(\"message\", ex.getMessage());\n        \n        return new ResponseEntity<>(errorResponse, HttpStatus.NOT_FOUND);\n    }\n\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    public ResponseEntity<Map<String, Object>> handleValidationExceptions(MethodArgumentNotValidException ex) {\n        Map<String, Object> errorResponse = new HashMap<>();\n        Map<String, String> validationErrors = new HashMap<>();\n        \n        ex.getBindingResult().getAllErrors().forEach((error) -> {\n            String fieldName = ((FieldError) error).getField();\n            String errorMessage = error.getDefaultMessage();\n            validationErrors.put(fieldName, errorMessage);\n        });\n        \n        errorResponse.put(\"timestamp\", LocalDateTime.now());\n        errorResponse.put(\"status\", HttpStatus.BAD_REQUEST.value());\n        errorResponse.put(\"error\", \"Validation Failed\");\n        errorResponse.put(\"validationErrors\", validationErrors);\n        \n        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    @ExceptionHandler(IllegalArgumentException.class)\n    public ResponseEntity<Map<String, Object>> handleIllegalArgument(IllegalArgumentException ex) {\n        Map<String, Object> errorResponse = new HashMap<>();\n        errorResponse.put(\"timestamp\", LocalDateTime.now());\n        errorResponse.put(\"status\", HttpStatus.BAD_REQUEST.value());\n        errorResponse.put(\"error\", \"Invalid Request\");\n        errorResponse.put(\"message\", ex.getMessage());\n        \n        return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);\n    }\n\n    @ExceptionHandler(Exception.class)\n    public ResponseEntity<Map<String, Object>> handleGenericException(Exception ex) {\n        Map<String, Object> errorResponse = new HashMap<>();\n        errorResponse.put(\"timestamp\", LocalDateTime.now());\n        errorResponse.put(\"status\", HttpStatus.INTERNAL_SERVER_ERROR.value());\n        errorResponse.put(\"error\", \"Internal Server Error\");\n        errorResponse.put(\"message\", \"An unexpected error occurred\");\n        \n        return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);\n    }\n}\n","size_bytes":3160},"src/main/java/com/workforcemgmt/exception/ResourceNotFoundException.java":{"content":"package com.workforcemgmt.exception;\n\n/**\n * Exception thrown when a requested resource is not found\n */\npublic class ResourceNotFoundException extends RuntimeException {\n    public ResourceNotFoundException(String message) {\n        super(message);\n    }\n}\n","size_bytes":258},"src/main/java/com/workforcemgmt/mapper/TaskMapper.java":{"content":"package com.workforcemgmt.mapper;\n\nimport com.workforcemgmt.dto.TaskDto;\nimport com.workforcemgmt.dto.TaskDetailsDto;\nimport com.workforcemgmt.model.Task;\nimport org.springframework.stereotype.Component;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * Mapper for converting between Task entities and DTOs\n */\n@Component\npublic class TaskMapper {\n\n    public TaskDto taskToTaskDto(Task task) {\n        if (task == null) {\n            return null;\n        }\n        \n        return new TaskDto(\n            task.getId(),\n            task.getTitle(),\n            task.getDescription(),\n            task.getStatus(),\n            task.getPriority(),\n            task.getAssignedStaffId(),\n            task.getAssignedStaffName(),\n            task.getStartDate(),\n            task.getDueDate(),\n            task.getCreatedAt(),\n            task.getUpdatedAt(),\n            task.getCreatedBy(),\n            task.getCustomerReference()\n        );\n    }\n\n    public List<TaskDto> tasksToTaskDtos(List<Task> tasks) {\n        if (tasks == null) {\n            return null;\n        }\n        \n        return tasks.stream()\n                .map(this::taskToTaskDto)\n                .collect(Collectors.toList());\n    }\n\n    public TaskDetailsDto taskToTaskDetailsDto(Task task) {\n        if (task == null) {\n            return null;\n        }\n        \n        return new TaskDetailsDto(\n            task.getId(),\n            task.getTitle(),\n            task.getDescription(),\n            task.getStatus(),\n            task.getPriority(),\n            task.getAssignedStaffId(),\n            task.getAssignedStaffName(),\n            task.getStartDate(),\n            task.getDueDate(),\n            task.getCreatedAt(),\n            task.getUpdatedAt(),\n            task.getCreatedBy(),\n            task.getCustomerReference(),\n            task.getActivityHistory(),\n            task.getComments()\n        );\n    }\n}\n","size_bytes":1918},"src/main/java/com/workforcemgmt/model/ActivityEntry.java":{"content":"package com.workforcemgmt.model;\n\nimport java.time.LocalDateTime;\n\n/**\n * Model representing an activity entry in task history\n */\npublic class ActivityEntry {\n    private String id;\n    private String taskId;\n    private String userId;\n    private String userName;\n    private String action;\n    private String description;\n    private LocalDateTime timestamp;\n\n    public ActivityEntry() {}\n\n    public ActivityEntry(String id, String taskId, String userId, String userName, String action, String description, LocalDateTime timestamp) {\n        this.id = id;\n        this.taskId = taskId;\n        this.userId = userId;\n        this.userName = userName;\n        this.action = action;\n        this.description = description;\n        this.timestamp = timestamp;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getTaskId() { return taskId; }\n    public void setTaskId(String taskId) { this.taskId = taskId; }\n\n    public String getUserId() { return userId; }\n    public void setUserId(String userId) { this.userId = userId; }\n\n    public String getUserName() { return userName; }\n    public void setUserName(String userName) { this.userName = userName; }\n\n    public String getAction() { return action; }\n    public void setAction(String action) { this.action = action; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n\n    public LocalDateTime getTimestamp() { return timestamp; }\n    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }\n}\n","size_bytes":1665},"src/main/java/com/workforcemgmt/model/Comment.java":{"content":"package com.workforcemgmt.model;\n\nimport java.time.LocalDateTime;\n\n/**\n * Model representing a user comment on a task\n */\npublic class Comment {\n    private String id;\n    private String taskId;\n    private String userId;\n    private String userName;\n    private String content;\n    private LocalDateTime timestamp;\n\n    public Comment() {}\n\n    public Comment(String id, String taskId, String userId, String userName, String content, LocalDateTime timestamp) {\n        this.id = id;\n        this.taskId = taskId;\n        this.userId = userId;\n        this.userName = userName;\n        this.content = content;\n        this.timestamp = timestamp;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getTaskId() { return taskId; }\n    public void setTaskId(String taskId) { this.taskId = taskId; }\n\n    public String getUserId() { return userId; }\n    public void setUserId(String userId) { this.userId = userId; }\n\n    public String getUserName() { return userName; }\n    public void setUserName(String userName) { this.userName = userName; }\n\n    public String getContent() { return content; }\n    public void setContent(String content) { this.content = content; }\n\n    public LocalDateTime getTimestamp() { return timestamp; }\n    public void setTimestamp(LocalDateTime timestamp) { this.timestamp = timestamp; }\n}\n","size_bytes":1409},"src/main/java/com/workforcemgmt/model/Priority.java":{"content":"package com.workforcemgmt.model;\n\n/**\n * Enumeration representing task priority levels\n */\npublic enum Priority {\n    HIGH,\n    MEDIUM,\n    LOW\n}\n","size_bytes":146},"src/main/java/com/workforcemgmt/model/Staff.java":{"content":"package com.workforcemgmt.model;\n\n/**\n * Model representing a staff member who can be assigned tasks\n */\npublic class Staff {\n    private String id;\n    private String name;\n    private String email;\n    private String department;\n\n    public Staff() {}\n\n    public Staff(String id, String name, String email, String department) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.department = department;\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n\n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n\n    public String getDepartment() { return department; }\n    public void setDepartment(String department) { this.department = department; }\n}\n","size_bytes":930},"src/main/java/com/workforcemgmt/model/Task.java":{"content":"package com.workforcemgmt.model;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * Model representing a work task that can be assigned to staff members\n */\npublic class Task {\n    private String id;\n    private String title;\n    private String description;\n    private TaskStatus status;\n    private Priority priority;\n    private String assignedStaffId;\n    private String assignedStaffName;\n    private LocalDate startDate;\n    private LocalDate dueDate;\n    private LocalDateTime createdAt;\n    private LocalDateTime updatedAt;\n    private String createdBy;\n    private String customerReference;\n    private List<ActivityEntry> activityHistory;\n    private List<Comment> comments;\n\n    public Task() {\n        this.activityHistory = new ArrayList<>();\n        this.comments = new ArrayList<>();\n    }\n\n    public Task(String id, String title, String description, TaskStatus status, Priority priority,\n                String assignedStaffId, String assignedStaffName, LocalDate startDate, LocalDate dueDate,\n                String createdBy, String customerReference) {\n        this.id = id;\n        this.title = title;\n        this.description = description;\n        this.status = status;\n        this.priority = priority;\n        this.assignedStaffId = assignedStaffId;\n        this.assignedStaffName = assignedStaffName;\n        this.startDate = startDate;\n        this.dueDate = dueDate;\n        this.createdBy = createdBy;\n        this.customerReference = customerReference;\n        this.createdAt = LocalDateTime.now();\n        this.updatedAt = LocalDateTime.now();\n        this.activityHistory = new ArrayList<>();\n        this.comments = new ArrayList<>();\n    }\n\n    // Getters and Setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n\n    public String getTitle() { return title; }\n    public void setTitle(String title) { this.title = title; }\n\n    public String getDescription() { return description; }\n    public void setDescription(String description) { this.description = description; }\n\n    public TaskStatus getStatus() { return status; }\n    public void setStatus(TaskStatus status) { this.status = status; }\n\n    public Priority getPriority() { return priority; }\n    public void setPriority(Priority priority) { this.priority = priority; }\n\n    public String getAssignedStaffId() { return assignedStaffId; }\n    public void setAssignedStaffId(String assignedStaffId) { this.assignedStaffId = assignedStaffId; }\n\n    public String getAssignedStaffName() { return assignedStaffName; }\n    public void setAssignedStaffName(String assignedStaffName) { this.assignedStaffName = assignedStaffName; }\n\n    public LocalDate getStartDate() { return startDate; }\n    public void setStartDate(LocalDate startDate) { this.startDate = startDate; }\n\n    public LocalDate getDueDate() { return dueDate; }\n    public void setDueDate(LocalDate dueDate) { this.dueDate = dueDate; }\n\n    public LocalDateTime getCreatedAt() { return createdAt; }\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\n\n    public LocalDateTime getUpdatedAt() { return updatedAt; }\n    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }\n\n    public String getCreatedBy() { return createdBy; }\n    public void setCreatedBy(String createdBy) { this.createdBy = createdBy; }\n\n    public String getCustomerReference() { return customerReference; }\n    public void setCustomerReference(String customerReference) { this.customerReference = customerReference; }\n\n    public List<ActivityEntry> getActivityHistory() { return activityHistory; }\n    public void setActivityHistory(List<ActivityEntry> activityHistory) { this.activityHistory = activityHistory; }\n\n    public List<Comment> getComments() { return comments; }\n    public void setComments(List<Comment> comments) { this.comments = comments; }\n}\n","size_bytes":3961},"src/main/java/com/workforcemgmt/model/TaskStatus.java":{"content":"package com.workforcemgmt.model;\n\n/**\n * Enumeration representing the possible states of a task\n */\npublic enum TaskStatus {\n    ACTIVE,\n    COMPLETED,\n    CANCELLED\n}\n","size_bytes":168},"src/main/java/com/workforcemgmt/service/StaffService.java":{"content":"package com.workforcemgmt.service;\n\nimport com.workforcemgmt.exception.ResourceNotFoundException;\nimport com.workforcemgmt.model.Staff;\nimport org.springframework.stereotype.Service;\n\nimport jakarta.annotation.PostConstruct;\nimport java.util.*;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * Service class for managing staff members\n */\n@Service\npublic class StaffService {\n    private final Map<String, Staff> staffStorage = new ConcurrentHashMap<>();\n\n    @PostConstruct\n    public void initializeData() {\n        // Initialize with some sample staff members\n        createStaff(new Staff(\"staff-1\", \"John Doe\", \"john.doe@company.com\", \"Sales\"));\n        createStaff(new Staff(\"staff-2\", \"Jane Smith\", \"jane.smith@company.com\", \"Operations\"));\n        createStaff(new Staff(\"staff-3\", \"Mike Johnson\", \"mike.johnson@company.com\", \"Sales\"));\n        createStaff(new Staff(\"staff-4\", \"Sarah Wilson\", \"sarah.wilson@company.com\", \"Operations\"));\n    }\n\n    public Staff createStaff(Staff staff) {\n        if (staff.getId() == null || staff.getId().isEmpty()) {\n            staff.setId(UUID.randomUUID().toString());\n        }\n        staffStorage.put(staff.getId(), staff);\n        return staff;\n    }\n\n    public List<Staff> getAllStaff() {\n        return new ArrayList<>(staffStorage.values());\n    }\n\n    public Staff getStaffById(String id) {\n        Staff staff = staffStorage.get(id);\n        if (staff == null) {\n            throw new ResourceNotFoundException(\"Staff member not found with id: \" + id);\n        }\n        return staff;\n    }\n\n    public Staff updateStaff(String id, Staff updatedStaff) {\n        if (!staffStorage.containsKey(id)) {\n            throw new ResourceNotFoundException(\"Staff member not found with id: \" + id);\n        }\n        updatedStaff.setId(id);\n        staffStorage.put(id, updatedStaff);\n        return updatedStaff;\n    }\n\n    public void deleteStaff(String id) {\n        if (!staffStorage.containsKey(id)) {\n            throw new ResourceNotFoundException(\"Staff member not found with id: \" + id);\n        }\n        staffStorage.remove(id);\n    }\n\n    public boolean staffExists(String id) {\n        return staffStorage.containsKey(id);\n    }\n}\n","size_bytes":2196},"src/main/java/com/workforcemgmt/service/TaskService.java":{"content":"package com.workforcemgmt.service;\n\nimport com.workforcemgmt.dto.CreateTaskRequest;\nimport com.workforcemgmt.exception.ResourceNotFoundException;\nimport com.workforcemgmt.model.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.concurrent.ConcurrentHashMap;\n\n/**\n * Service class for managing tasks, including CRUD operations and business logic\n */\n@Service\npublic class TaskService {\n    private final Map<String, Task> taskStorage = new ConcurrentHashMap<>();\n    private final StaffService staffService;\n\n    @Autowired\n    public TaskService(StaffService staffService) {\n        this.staffService = staffService;\n    }\n\n    public Task createTask(CreateTaskRequest request) {\n        // Validate staff exists\n        Staff assignedStaff = staffService.getStaffById(request.getAssignedStaffId());\n        \n        String taskId = UUID.randomUUID().toString();\n        Task task = new Task(\n            taskId,\n            request.getTitle(),\n            request.getDescription(),\n            TaskStatus.ACTIVE,\n            request.getPriority(),\n            request.getAssignedStaffId(),\n            assignedStaff.getName(),\n            request.getStartDate(),\n            request.getDueDate(),\n            request.getCreatedBy(),\n            request.getCustomerReference()\n        );\n\n        taskStorage.put(taskId, task);\n        \n        // Log activity\n        addActivityEntry(task, request.getCreatedBy(), request.getCreatedBy(), \n                        \"CREATED\", \"Task created and assigned to \" + assignedStaff.getName());\n        \n        return task;\n    }\n\n    public List<Task> getAllTasks() {\n        return new ArrayList<>(taskStorage.values());\n    }\n\n    public Task getTaskById(String id) {\n        Task task = taskStorage.get(id);\n        if (task == null) {\n            throw new ResourceNotFoundException(\"Task not found with id: \" + id);\n        }\n        return task;\n    }\n\n    public Task updateTask(String id, Task updatedTask) {\n        Task existingTask = getTaskById(id);\n        \n        updatedTask.setId(id);\n        updatedTask.setCreatedAt(existingTask.getCreatedAt());\n        updatedTask.setUpdatedAt(LocalDateTime.now());\n        updatedTask.setActivityHistory(existingTask.getActivityHistory());\n        updatedTask.setComments(existingTask.getComments());\n        \n        taskStorage.put(id, updatedTask);\n        return updatedTask;\n    }\n\n    public void deleteTask(String id) {\n        if (!taskStorage.containsKey(id)) {\n            throw new ResourceNotFoundException(\"Task not found with id: \" + id);\n        }\n        taskStorage.remove(id);\n    }\n\n    /**\n     * Reassign task to a new staff member by customer reference\n     * Fixes Bug 1: Properly cancels old task instead of creating duplicates\n     */\n    public Task reassignTaskByCustomerReference(String customerReference, String newStaffId, String updatedBy) {\n        // Validate new staff exists\n        Staff newStaff = staffService.getStaffById(newStaffId);\n        \n        // Find existing active task for this customer reference\n        Task existingTask = taskStorage.values().stream()\n            .filter(task -> customerReference.equals(task.getCustomerReference()) && \n                           task.getStatus() == TaskStatus.ACTIVE)\n            .findFirst()\n            .orElseThrow(() -> new ResourceNotFoundException(\"No active task found for customer reference: \" + customerReference));\n\n        // Cancel the old task\n        existingTask.setStatus(TaskStatus.CANCELLED);\n        existingTask.setUpdatedAt(LocalDateTime.now());\n        addActivityEntry(existingTask, updatedBy, updatedBy, \n                        \"CANCELLED\", \"Task cancelled due to reassignment\");\n\n        // Create new task with the same details but assigned to new staff\n        String newTaskId = UUID.randomUUID().toString();\n        Task newTask = new Task(\n            newTaskId,\n            existingTask.getTitle(),\n            existingTask.getDescription(),\n            TaskStatus.ACTIVE,\n            existingTask.getPriority(),\n            newStaffId,\n            newStaff.getName(),\n            existingTask.getStartDate(),\n            existingTask.getDueDate(),\n            updatedBy,\n            customerReference\n        );\n\n        taskStorage.put(newTaskId, newTask);\n        \n        // Log activity for new task\n        addActivityEntry(newTask, updatedBy, updatedBy, \n                        \"CREATED\", \"Task reassigned from \" + existingTask.getAssignedStaffName() + \" to \" + newStaff.getName());\n        \n        return newTask;\n    }\n\n    /**\n     * Get tasks by date range, excluding cancelled tasks\n     * Fixes Bug 2: Filters out cancelled tasks from the result\n     */\n    public List<Task> getTasksByDateRange(LocalDate startDate, LocalDate endDate) {\n        return taskStorage.values().stream()\n            .filter(task -> task.getStatus() != TaskStatus.CANCELLED) // Exclude cancelled tasks\n            .filter(task -> {\n                LocalDate taskStartDate = task.getStartDate();\n                return taskStartDate != null && \n                       !taskStartDate.isBefore(startDate) && \n                       !taskStartDate.isAfter(endDate);\n            })\n            .collect(Collectors.toList());\n    }\n\n    /**\n     * Smart daily task view - Feature 1\n     * Returns tasks that started in the date range PLUS active tasks that started before but are still open\n     */\n    public List<Task> getSmartDailyTasks(LocalDate startDate, LocalDate endDate) {\n        return taskStorage.values().stream()\n            .filter(task -> task.getStatus() != TaskStatus.CANCELLED) // Exclude cancelled tasks\n            .filter(task -> {\n                LocalDate taskStartDate = task.getStartDate();\n                if (taskStartDate == null) return false;\n                \n                // Tasks that started within the range\n                boolean startedInRange = !taskStartDate.isBefore(startDate) && !taskStartDate.isAfter(endDate);\n                \n                // Active tasks that started before the range but are still open\n                boolean activeFromBefore = taskStartDate.isBefore(startDate) && \n                                         task.getStatus() == TaskStatus.ACTIVE;\n                \n                return startedInRange || activeFromBefore;\n            })\n            .collect(Collectors.toList());\n    }\n\n    /**\n     * Update task priority - Feature 2\n     */\n    public Task updateTaskPriority(String taskId, Priority newPriority, String updatedBy) {\n        Task task = getTaskById(taskId);\n        Priority oldPriority = task.getPriority();\n        \n        task.setPriority(newPriority);\n        task.setUpdatedAt(LocalDateTime.now());\n        \n        addActivityEntry(task, updatedBy, updatedBy, \n                        \"PRIORITY_CHANGED\", \n                        \"Priority changed from \" + oldPriority + \" to \" + newPriority);\n        \n        return task;\n    }\n\n    /**\n     * Get tasks by priority - Feature 2\n     */\n    public List<Task> getTasksByPriority(Priority priority) {\n        return taskStorage.values().stream()\n            .filter(task -> task.getStatus() != TaskStatus.CANCELLED) // Exclude cancelled tasks\n            .filter(task -> priority.equals(task.getPriority()))\n            .collect(Collectors.toList());\n    }\n\n    /**\n     * Add comment to task - Feature 3\n     */\n    public Task addCommentToTask(String taskId, String userId, String userName, String content) {\n        Task task = getTaskById(taskId);\n        \n        Comment comment = new Comment(\n            UUID.randomUUID().toString(),\n            taskId,\n            userId,\n            userName,\n            content,\n            LocalDateTime.now()\n        );\n        \n        task.getComments().add(comment);\n        task.setUpdatedAt(LocalDateTime.now());\n        \n        addActivityEntry(task, userId, userName, \"COMMENT_ADDED\", \"Comment added: \" + content);\n        \n        return task;\n    }\n\n    /**\n     * Update task status\n     */\n    public Task updateTaskStatus(String taskId, TaskStatus newStatus, String updatedBy) {\n        Task task = getTaskById(taskId);\n        TaskStatus oldStatus = task.getStatus();\n        \n        task.setStatus(newStatus);\n        task.setUpdatedAt(LocalDateTime.now());\n        \n        addActivityEntry(task, updatedBy, updatedBy, \n                        \"STATUS_CHANGED\", \n                        \"Status changed from \" + oldStatus + \" to \" + newStatus);\n        \n        return task;\n    }\n\n    /**\n     * Helper method to add activity entries - Feature 3\n     */\n    private void addActivityEntry(Task task, String userId, String userName, String action, String description) {\n        ActivityEntry entry = new ActivityEntry(\n            UUID.randomUUID().toString(),\n            task.getId(),\n            userId,\n            userName,\n            action,\n            description,\n            LocalDateTime.now()\n        );\n        \n        task.getActivityHistory().add(entry);\n        \n        // Sort activity history chronologically\n        task.getActivityHistory().sort(Comparator.comparing(ActivityEntry::getTimestamp));\n    }\n\n    /**\n     * Get task with full details including activity history and comments - Feature 3\n     */\n    public Task getTaskWithFullDetails(String taskId) {\n        Task task = getTaskById(taskId);\n        \n        // Sort activity history and comments chronologically\n        task.getActivityHistory().sort(Comparator.comparing(ActivityEntry::getTimestamp));\n        task.getComments().sort(Comparator.comparing(Comment::getTimestamp));\n        \n        return task;\n    }\n}\n","size_bytes":9817}}}